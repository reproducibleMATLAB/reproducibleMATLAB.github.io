[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "repliMAT: A Guide to Reproducible MATLAB",
    "section": "",
    "text": "Welcome!\nWelcome to repliMAT!\nüöß This book is very much under development üöß\nThis is a resource for learning and teaching about developing reproducible and sustainable code in the MATLAB programming language.\nHere you will find content, exercises and videos intended to either be followed alone or with a group, or taught as part of a workshop.\nThe materials are primarily aimed at researchers and their specific demands, but should be applicable to all uses of MATLAB.",
    "crumbs": [
      "Welcome!"
    ]
  },
  {
    "objectID": "index.html#how-to-use-this-guide",
    "href": "index.html#how-to-use-this-guide",
    "title": "repliMAT: A Guide to Reproducible MATLAB",
    "section": "How to use this guide",
    "text": "How to use this guide\nThis guide is split into two main parts: a reference guide and a set of exercises.\nThe intention is for the reference guide (begin here) to act as a place to learn about the reasoning behind concepts in reproducible MATLAB project design, as well as somewhere to come back to as a reference when working on your own project.\nThe exercises are a worked-through set of examples that can either be taught as part of a workshop or followed on your own.\nThe third part of these two main parts (üôÑ) is the extra credit section, containing concepts that aren‚Äôt absolutely essential for reproducibility, but are considered good/excellent practice in programming.",
    "crumbs": [
      "Welcome!"
    ]
  },
  {
    "objectID": "index.html#contributing",
    "href": "index.html#contributing",
    "title": "repliMAT: A Guide to Reproducible MATLAB",
    "section": "Contributing",
    "text": "Contributing\nContributions to the repliMAT materials are welcomed! Please follow the guidance below prior to making contributions to ensure that your kind efforts do not go to waste.\nThe project‚Äôs source code and development is managed at its GitHub repository. There are a few ways to contribute, depending on whether you want to make changes to the source code or not.\nIn all interactions, please abide by the code of conduct",
    "crumbs": [
      "Welcome!"
    ]
  },
  {
    "objectID": "index.html#issues",
    "href": "index.html#issues",
    "title": "repliMAT: A Guide to Reproducible MATLAB",
    "section": "Issues",
    "text": "Issues\nOpen a new issue to describe a bug, error or to request changes.",
    "crumbs": [
      "Welcome!"
    ]
  },
  {
    "objectID": "index.html#contributing-code",
    "href": "index.html#contributing-code",
    "title": "repliMAT: A Guide to Reproducible MATLAB",
    "section": "Contributing code",
    "text": "Contributing code\nIf contributing source code changes to the project please follow the following workflow:\n\nMake a fork of the repository on GitHub.\nClone your fork to your local machine and make a new branch with a name relevant to the task you‚Äôre working on.\nMake some changes and ensure that the pages render as expected by following the instructions in the README to render the materials.\nCommit those changes with meaningful commit messages.\nPush your branch to GitHub and open a pull request against the upstream repository‚Äôs main branch.\nIn the pull request description, please reference the issue that you are resolving.\nSomeone will review your pull request and hopefully it will be merged! üéâ",
    "crumbs": [
      "Welcome!"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1¬† Introduction",
    "section": "",
    "text": "1.1 What is research reproducibility?\nAccording to The Turing Way‚Äôs definitions1, the term reproducibility refers to performing the same analysis on the same data for the same result. Other terms such as replicability and generalisability are used to refer to using different analyses or different data. This may not be your definition, but it‚Äôs the one meant here and derived from the research done by the authors of The Turing Way (an exemplary guide to reproducible research software).\nResearch that is reproducible has many benefits, it:\namong many others.\nCode is great for research reproducibility in lots of ways. Code describes a proceduralised sequence of operations to some data, with (arguably) zero ambiguity - great! That‚Äôs just what we need for research. Where appropriate, code is an excellent solution to capturing and reproducing the steps taken to go from some raw data/input to some research conclusions.\nHowever, in practice it isn‚Äôt always as easy as that. So this guide aims to provide researchers who code with the tools they need to make their MATLAB-based research (more) reproducible.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#what-is-research-reproducibility",
    "href": "intro.html#what-is-research-reproducibility",
    "title": "1¬† Introduction",
    "section": "",
    "text": "is easier to validate (perhaps even possible to validate),\nhas more long-term validity,\nis more extensible,\nreduces repetition,\ndecreases likelihood of losing methodology,",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#open-research-reproducibility",
    "href": "intro.html#open-research-reproducibility",
    "title": "1¬† Introduction",
    "section": "1.2 Open Research & Reproducibility",
    "text": "1.2 Open Research & Reproducibility\nOpen research is the idea that the entire research lifecycle should be transparent for all to see. As an approach, open research continues to grow and many funders now stipulate that the research that they fund must follow open principles including the open availability of publications, data and code. How does this fit in with reproducibility? I would argue that if you are required to make your code available, whether that‚Äôs for a publication, thesis or just to share it with a colleague, it would be a good thing for the code to actually work, and for it to be relatively easy to make it do so. It‚Äôs commonplace in research to obtain some code and spend a significant period of time attempting to run it successfully, let alone validating that it produces something accurate. Therefore reproducibility is an important component of open research, though it need not be complicated.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#is-it-worth-the-effort",
    "href": "intro.html#is-it-worth-the-effort",
    "title": "1¬† Introduction",
    "section": "1.3 Is it worth the effort?",
    "text": "1.3 Is it worth the effort?\nThere‚Äôs no denying that learning and implementing the approaches required to enable reproducible research is yet another thing to do. As researchers we already have so many different skills to master: domain expertise, writing, graphic design, experimental design, public speaking, statistics. The list goes on. So why should we voluntarily make our programming practices even more involved than they already are. Many of us don‚Äôt even like programming, so can‚Äôt we just get the job done?\nYes and no. As mentioned above, many funders and publishers require open research practices, so as far as I‚Äôm concerned, the code should actually work when we share it. Understandably, people are often resistant to making their practices even more complicated. The culture still hasn‚Äôt really shifted to expecting fully reproducible research code. However, I would give most researchers the benefit of the doubt and assume that most want their work to be verifiably correct.\nMoreso than just being ‚Äúthe right thing to do‚Äù - making one‚Äôs research more reproducible has all sorts of benefits. Let‚Äôs expand on the benefits mentioned above. If we want to check that our work is correct, being able to send it to a colleague who can then actually make it run is a huge advantage. I‚Äôm sure we‚Äôve all been in the situation where someone sends a zip file of code with no instructions and we spend ages trying to make it work. Reproducible research saves us and our colleagues and collaborators time by simplifying this process, allowing us to actually get on with the research we‚Äôre interested in. If we publish some work and people are able to make it work, they‚Äôre more likely to build upon it and cite our work. This accelerates research and gets us the recognition we deserve. Importantly, when we come back to our work in the future, we may actually understand what we did and be able to build upon it ourselves. Imagine that!",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#why-matlab",
    "href": "intro.html#why-matlab",
    "title": "1¬† Introduction",
    "section": "1.4 Why MATLAB?",
    "text": "1.4 Why MATLAB?\nWhy is MATLAB a tool that we should care about when it comes to reproducible practices?\nBecause MATLAB is a popular language in research.\nThat‚Äôs it.\nWhatever your technical opinion of a language, or whether it is proprietary or open source, for all sorts of reasons, MATLAB is used by a lot of researchers. It has a relatively long history as being a tool with a lot of useful mathematical and analytical features, is relatively user friendly and a large number of universities have a license.\nBut, possibly because it‚Äôs a proprietary language, most of the guidance and documentation comes from the organisation that develops it, MathWorks.\nIn comparison to other programming languages currently popular in research such as Python & R, the availability of guidance around reproducibility is relatively limited.\nSo that‚Äôs why this guide has been developed, to allow those researchers who currently use MATLAB to make their research more reproducible and easier to share.\nNot because I think MATLAB is the best, or the worst. I just think that all research should aim to be as reproducible as possible and that you should use the best tool for the job, even if that‚Äôs just the one that you currently know.\nMany researchers using MATLAB have said to me:\n\nI know I should rewrite this in python so that I can share it.\n\nBut realistically, the likelihood is that you‚Äôll just move on to your next project. The demands and incentives of the research world mean that investigating a new thing carries much more value than refining an existing project to a higher standard.\nSo let‚Äôs make the projects we‚Äôre working on now as good as they can be.\n\n\n\n\n1. The Turing Way Community. The Turing Way: A handbook for reproducible, ethical and collaborative research. (2022) doi:10.5281/zenodo.3233853.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "code-style/index.html",
    "href": "code-style/index.html",
    "title": "2¬† Introduction",
    "section": "",
    "text": "Whilst this is primarily a guide to writing more reproducible MATLAB, I would argue that writing cleaner code is an important step. It can make your code easier to read and follow (for you as well as others) - making it simpler to spot errors and mistakes, as well as for others to make contributions and improve or build upon your code.\nWe‚Äôll explain this in several steps:\n\nvariables\nfunctions\ncodebase organisation (it‚Äôs not just the programming that helps)\nhow to document your code.\n\nOne significant reference here is the book ‚ÄúThe Elements of MATLAB Style‚Äù by Richard Johnson1 which acts as the de facto community standard for style when it comes to programming in MATLAB. As well as the book itself, there are several resources based on it that have the core elements of its teachings on code style in MATLAB:\n\ncheat sheet - available from MATLAB file exchange - much better than reading the actual book\nupdates to the book - also on file exchange\n\nThe cheat sheet is also reproduced on this site here for ease of searching and for quick reference.\nWith any programming language, it pays to disavow yourself of any opinions that you may have and save yourself the time of thinking about how to write your code by just following the standard practices of the community. Your code may run perfectly well. You may think that a certain way of function-naming is slightly better. But if we all stick to the same standards, we all have an easier time of reading each other‚Äôs code and don‚Äôt have to waste time arguing (yes, this is something that people argue about.)\n\n\n\n\n1. Johnson, R. K. The elements of MATLAB style. (Cambridge University Press, 2010).",
    "crumbs": [
      "Writing Cleaner Code",
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "code-style/comments.html",
    "href": "code-style/comments.html",
    "title": "3¬† Comments",
    "section": "",
    "text": "3.1 For code readability\nOne element of reproducible, or more specifically, sustainable code is its readability. In an ideal world, all code would be implicitly readable: its variable, function and class names would all explain themselves and a reader would immediately understand the authour‚Äôs intent (always remember that more often than not, reader and authour are the same person!). However, in reality, it‚Äôs often necessary to clarify the intent of some particular logic in line with the code, and this is where comments come in handy.\nTo make this quick and easy, in the MATLAB editor you can use the following key combinations to add or remove comments, respectively:\nComments are one element of good coding practice that I find most developers (that‚Äôs people who write code, i.e.¬†you!) are familiar with, so this shouldn‚Äôt come as too much of a shock. However, they aren‚Äôt a substitute for the generally good coding practices described throughout this guide.\nLarge sections of comments should be avoided and if you find that your code needs them, it may be an indication that restructuring your code or using documentation (described later) instead may result in something easier to understand.",
    "crumbs": [
      "Writing Cleaner Code",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Comments</span>"
    ]
  },
  {
    "objectID": "code-style/comments.html#for-code-readability",
    "href": "code-style/comments.html#for-code-readability",
    "title": "3¬† Comments",
    "section": "",
    "text": "% Comments are lines of code that do not get executed.\n% In MATLAB, comment lines begin with a percent (%) symbol.\na = 42; % They can occur on the same line as executable code.\n% Everything after the % is a comment.\n\n\ndisp(a)\n\n\n%{\nMultiple lines of\ncode can be\ncommented out\nas a block.\nUsing curly braces.\n%}\n\n\n% Comments can also be used to stop lines of code from executing.\n% b = 84;\n\n\nCtrl+R and Ctrl+Shift+R on Windows\nCmd ‚åò+/ and Cmd ‚åò+Shift+/ on MacOS\nCtrl+/ and Ctrl+Shift+/ on Linux",
    "crumbs": [
      "Writing Cleaner Code",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Comments</span>"
    ]
  },
  {
    "objectID": "code-style/comments.html#commenting-out-code",
    "href": "code-style/comments.html#commenting-out-code",
    "title": "3¬† Comments",
    "section": "3.2 Commenting out code",
    "text": "3.2 Commenting out code\nAs mentioned above, comments can be used to prevent a line from executing, which is a useful tool during development. This allows us to test different parameter options and approaches and can be helpful when debugging.\nThis being said, when we come to share our code, be this for publishing, dissemination or sending to colleagues, commented-out lines of code are a huge cause for confusion and potential errors in execution.\nReproducibility is a difficult challenge, hence this guide needing to exist, so when someone receives some code it will often not execute without errors (that‚Äôs the problem we‚Äôre trying to solve here). This leads the user to then look for sources of error and commented-out lines of code create ambiguity. Should this line be executed? Did my colleague intend to run this line or not?\nTherefore, in most cases it‚Äôs a good idea to avoid commenting out actual code when it will be shared.\nIn practice, this isn‚Äôt always practical, so try to add other comments justifying why a line would be commented out at all. And the more packaged up and professional the codebase, the less you should have commented-out lines of executable code. I wouldn‚Äôt expect to see this in a finished toolbox or package, for instance.",
    "crumbs": [
      "Writing Cleaner Code",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Comments</span>"
    ]
  },
  {
    "objectID": "code-style/comments.html#comments-for-controlling-execution---dont-do-it",
    "href": "code-style/comments.html#comments-for-controlling-execution---dont-do-it",
    "title": "3¬† Comments",
    "section": "3.3 Comments for controlling execution - don‚Äôt do it!",
    "text": "3.3 Comments for controlling execution - don‚Äôt do it!\nFollowing on from this, it‚Äôs common during development to use comments for controlling execution, setting options and changing parameters. Whilst this will make sense to the person writing the code (at the time) - other users will rarely be able to understand or have confidence in this approach.\nIf you‚Äôre sharing code and telling the user to ‚Äújust comment out this line‚Äù to get the result they want - this is an indication that you should either split the job of this code into separate functions, or use conditional statements to control the execution.",
    "crumbs": [
      "Writing Cleaner Code",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Comments</span>"
    ]
  },
  {
    "objectID": "code-style/variables.html",
    "href": "code-style/variables.html",
    "title": "4¬† Variables",
    "section": "",
    "text": "üöß Nothing here yet! Check back later. üöß",
    "crumbs": [
      "Writing Cleaner Code",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Variables</span>"
    ]
  },
  {
    "objectID": "code-style/functions.html",
    "href": "code-style/functions.html",
    "title": "5¬† Functions",
    "section": "",
    "text": "üöß Nothing here yet! Check back later. üöß",
    "crumbs": [
      "Writing Cleaner Code",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "code-style/organisation.html",
    "href": "code-style/organisation.html",
    "title": "6¬† Project Organisation",
    "section": "",
    "text": "üöß Nothing here yet! Check back later. üöß",
    "crumbs": [
      "Writing Cleaner Code",
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Project Organisation</span>"
    ]
  },
  {
    "objectID": "code-style/documentation.html",
    "href": "code-style/documentation.html",
    "title": "7¬† Documentation",
    "section": "",
    "text": "üöß Nothing here yet! Check back later. üöß",
    "crumbs": [
      "Writing Cleaner Code",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Documentation</span>"
    ]
  },
  {
    "objectID": "reproducibility/index.html",
    "href": "reproducibility/index.html",
    "title": "8¬† Introduction",
    "section": "",
    "text": "üöß Nothing here yet! Check back later. üöß",
    "crumbs": [
      "Reproducibility",
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "reproducibility/dependencies.html",
    "href": "reproducibility/dependencies.html",
    "title": "9¬† Dependencies",
    "section": "",
    "text": "üöß Nothing here yet! Check back later. üöß",
    "crumbs": [
      "Reproducibility",
      "<span class='chapter-number'>9</span>¬† <span class='chapter-title'>Dependencies</span>"
    ]
  },
  {
    "objectID": "reproducibility/versioning.html",
    "href": "reproducibility/versioning.html",
    "title": "10¬† Versioning",
    "section": "",
    "text": "üöß Nothing here yet! Check back later. üöß",
    "crumbs": [
      "Reproducibility",
      "<span class='chapter-number'>10</span>¬† <span class='chapter-title'>Versioning</span>"
    ]
  },
  {
    "objectID": "reproducibility/projects.html",
    "href": "reproducibility/projects.html",
    "title": "11¬† Projects",
    "section": "",
    "text": "üöß Nothing here yet! Check back later. üöß",
    "crumbs": [
      "Reproducibility",
      "<span class='chapter-number'>11</span>¬† <span class='chapter-title'>Projects</span>"
    ]
  },
  {
    "objectID": "exercises/index.html",
    "href": "exercises/index.html",
    "title": "12¬† Introduction",
    "section": "",
    "text": "12.1 How to work with these exercises\nYou‚Äôll either need a recent copy of MATLAB installed on your computer, or you can follow the links alongside the exercises to open the examples in MATLAB online.\nTo get hold of the code and use it on your own computer, you can use git to ‚Äúclone‚Äù the code from GitHub, or just download it. Instructions are in the ‚ÄúGetting started‚Äù section.",
    "crumbs": [
      "Exercises",
      "<span class='chapter-number'>12</span>¬† <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "exercises/getting-started.html",
    "href": "exercises/getting-started.html",
    "title": "13¬† Getting Started",
    "section": "",
    "text": "13.1 Technical setup\nYou‚Äôll need an installation of MATLAB, preferably a recent version (i.e.¬†in the last year or so). Where a specific version is needed, or doesn‚Äôt work with an example, it should be indicated alongside the exercise. See Section 13.1.1 below for more info on versions.\nFollow the instructions on MathWorks.com to install.\nNo specific toolboxes are required.\nNote There is no guarantee that anything in these materials will work with Octave. In fact it probably won‚Äôt. But let us know if you try!",
    "crumbs": [
      "Exercises",
      "<span class='chapter-number'>13</span>¬† <span class='chapter-title'>Getting Started</span>"
    ]
  },
  {
    "objectID": "exercises/getting-started.html#technical-setup",
    "href": "exercises/getting-started.html#technical-setup",
    "title": "13¬† Getting Started",
    "section": "",
    "text": "13.1.1 MATLAB versions\nA new version of MATLAB is released twice a year. The version numbers are comprised of the letter ‚ÄòR‚Äô followed by the calendar year and ‚Äòa‚Äô if it‚Äôs the first release in the year and ‚Äòb‚Äô for the second. e.g.¬†R2022b. Each version has improvements from the last and makes changes. It‚Äôs a good idea to be using the most recent version of MATLAB in most cases.",
    "crumbs": [
      "Exercises",
      "<span class='chapter-number'>13</span>¬† <span class='chapter-title'>Getting Started</span>"
    ]
  },
  {
    "objectID": "exercises/getting-started.html#how-to-use-these-materials",
    "href": "exercises/getting-started.html#how-to-use-these-materials",
    "title": "13¬† Getting Started",
    "section": "13.2 How to use these materials",
    "text": "13.2 How to use these materials\n\n13.2.1 Where to start\nAnywhere you like! Hopefully the structure of the exercises included here means that you can dip in to any point that takes your fancy.\n\n\n13.2.2 Prerequisites\nThese materials assume that you‚Äôre already familiar with the basics of programming in MATLAB. Variables, arrays, loops, reading in data and making plots etc.",
    "crumbs": [
      "Exercises",
      "<span class='chapter-number'>13</span>¬† <span class='chapter-title'>Getting Started</span>"
    ]
  },
  {
    "objectID": "extra-credit/testing.html",
    "href": "extra-credit/testing.html",
    "title": "14¬† Testing",
    "section": "",
    "text": "üöß Nothing here yet! Check back later. üöß",
    "crumbs": [
      "Extra Credit",
      "<span class='chapter-number'>14</span>¬† <span class='chapter-title'>Testing</span>"
    ]
  },
  {
    "objectID": "extra-credit/version-control.html",
    "href": "extra-credit/version-control.html",
    "title": "15¬† Version Control",
    "section": "",
    "text": "üöß Nothing here yet! Check back later. üöß",
    "crumbs": [
      "Extra Credit",
      "<span class='chapter-number'>15</span>¬† <span class='chapter-title'>Version Control</span>"
    ]
  },
  {
    "objectID": "appendices/code-style-cheatsheet.html",
    "href": "appendices/code-style-cheatsheet.html",
    "title": "Code Style Cheat Sheet",
    "section": "",
    "text": "Naming Conventions",
    "crumbs": [
      "Appendices",
      "Code Style Cheat Sheet"
    ]
  },
  {
    "objectID": "appendices/code-style-cheatsheet.html#variables",
    "href": "appendices/code-style-cheatsheet.html#variables",
    "title": "Code Style Cheat Sheet",
    "section": "Variables",
    "text": "Variables\n\nVariable names should be mixed case starting with lower case: velocity, angularAcceleration.\nVariables with a large scope should have meaningful names. Variables with a small scope can have short names:\n\nSmall scope: x, y, z\nLarge scope: velocity, acceleration\n\nThe prefix n should be used for variables representing the number of objects: nFiles, nCars, nLines\nUse a convention on pluralization consistently: point, pointArray\nVariables representing a single entity number can be suffixed by No: tableNo, employeeNo\nIterator variables should be named or prefixed with i, j, k etc. e.g.¬†iFiles, jColumns\nFor nested loops, the iterator should be alphabetical order and helpful names e.g.\n\nfor iFiles = 1:nFiles\n    for jPositions = 1:nPositions\n        ...\n    end\nend\n\nAvoid negated boolean variable names: isNotFound instead use isFound\nAcronyms, even if normally uppercase, should be mixed or lower case. Use: html, isUsaSpecific\nAvoid using a keyword or special value name. Just don‚Äôt do it.",
    "crumbs": [
      "Appendices",
      "Code Style Cheat Sheet"
    ]
  },
  {
    "objectID": "appendices/code-style-cheatsheet.html#constants",
    "href": "appendices/code-style-cheatsheet.html#constants",
    "title": "Code Style Cheat Sheet",
    "section": "Constants",
    "text": "Constants\n\nNamed constants should be all uppercase using underscore to separate words: MAX_ITERATIONS, COLOR_RED\nConstants can be prefixed by a common type name: COLOR_RED, COLOR_GREEN, COLOR_BLUE",
    "crumbs": [
      "Appendices",
      "Code Style Cheat Sheet"
    ]
  },
  {
    "objectID": "appendices/code-style-cheatsheet.html#structures",
    "href": "appendices/code-style-cheatsheet.html#structures",
    "title": "Code Style Cheat Sheet",
    "section": "Structures",
    "text": "Structures\n\nStructure names should be mixed case and begin with a capital letter: Car, DumpTruck\nDo not include the name of the structure in the field name. Use Segment.length. Avoid Segment.segmentLength",
    "crumbs": [
      "Appendices",
      "Code Style Cheat Sheet"
    ]
  },
  {
    "objectID": "appendices/code-style-cheatsheet.html#functions",
    "href": "appendices/code-style-cheatsheet.html#functions",
    "title": "Code Style Cheat Sheet",
    "section": "Functions",
    "text": "Functions\n\nThe names of functions should document their use.\nNames of functions should be written in lower or mixed case: width(), computeTotalWidth()\nFunctions should have meaningful names. Use computeTotalWidth. Avoid compwid.\nFunctions with single output can be named for the output: shearStress(), standardError()\nFunctions with no output argument or which only return a handle should be named after what they do: plotfft()\nReserve the prefix get/set for accessing an object or property: getobj(), setappdata()\nReserve the prefix compute for methods where something is computed: computeSumOfResiduals(), computeSpread()\nReserve the prefix find for methods where something is looked up: findOldestRecord()\nReserve the prefix initialize for instantiating an object or concept: initializeProblemState()\nReserve the prefix is for boolean functions: isCrazy, isNuts, isOffHisRocker\nUse complement names for complement operations: get/set, add/remove, create/destroy, start/stop, insert/delete, increment/decrement, old/new, begin/end, first/last, up/down, min/max, next/previous, open/close, show/hide, suspend/resume, etc.\nAvoid unintentional shadowing of function names. Use the which -all or exist tools to check for shadowing.",
    "crumbs": [
      "Appendices",
      "Code Style Cheat Sheet"
    ]
  },
  {
    "objectID": "appendices/code-style-cheatsheet.html#general",
    "href": "appendices/code-style-cheatsheet.html#general",
    "title": "Code Style Cheat Sheet",
    "section": "General",
    "text": "General\n\nAbbreviations in names should be avoided. Use computeArrivalTime. Avoid comparr.\nConsider making names pronounceable.\nAll names should be written in English.",
    "crumbs": [
      "Appendices",
      "Code Style Cheat Sheet"
    ]
  },
  {
    "objectID": "appendices/code-style-cheatsheet.html#m-files",
    "href": "appendices/code-style-cheatsheet.html#m-files",
    "title": "Code Style Cheat Sheet",
    "section": "M-Files",
    "text": "M-Files\n\nModularize code. Use small well designed pieces to make the whole.\nWrite functions that are easy to test.\nMake interaction clear. Use inputs and outputs rather than global variables.\nReplace long lists of arguments with structures.\nPartitioning. All sub-functions and most functions should do one thing very well.\nUse existing functions rather than custom coded functions when possible.\nMove blocks of code used in multiple m-files to functions.\nUse sub-functions when a function is only called by one other function.\nWrite test scripts for every function.",
    "crumbs": [
      "Appendices",
      "Code Style Cheat Sheet"
    ]
  },
  {
    "objectID": "appendices/code-style-cheatsheet.html#inputoutput",
    "href": "appendices/code-style-cheatsheet.html#inputoutput",
    "title": "Code Style Cheat Sheet",
    "section": "Input/Output",
    "text": "Input/Output\n\nMake input and output modules for large functions.\nFormat output for easy use. For humans, make it human readable. For machines, make it parsable.",
    "crumbs": [
      "Appendices",
      "Code Style Cheat Sheet"
    ]
  },
  {
    "objectID": "appendices/code-style-cheatsheet.html#variables-and-constants",
    "href": "appendices/code-style-cheatsheet.html#variables-and-constants",
    "title": "Code Style Cheat Sheet",
    "section": "Variables and constants",
    "text": "Variables and constants\n\nVariables should not be reused unless required by memory limitations.\nRelated variables of the same type can be declared in a common statement. Unrelated variables should not be declared in the same statement:\n\npersistent x, y, z\n\nDocument important variables in comments near the start of the file.\nDocument constants with end of line comments:\n\nTHRESHOLD = 10; % Max noise level",
    "crumbs": [
      "Appendices",
      "Code Style Cheat Sheet"
    ]
  },
  {
    "objectID": "appendices/code-style-cheatsheet.html#global-variables",
    "href": "appendices/code-style-cheatsheet.html#global-variables",
    "title": "Code Style Cheat Sheet",
    "section": "Global Variables",
    "text": "Global Variables\n\nMinimize use of global variables and constants.\nConsider using a function instead of a global constant.",
    "crumbs": [
      "Appendices",
      "Code Style Cheat Sheet"
    ]
  },
  {
    "objectID": "appendices/code-style-cheatsheet.html#loops",
    "href": "appendices/code-style-cheatsheet.html#loops",
    "title": "Code Style Cheat Sheet",
    "section": "Loops",
    "text": "Loops\n\nVariables used in loops should be initialized immediately before the loop.\n\nresult = zeros(nDays,1);\nfor iDay = 1:nDays\n    result(iDay)= foo(iDay);\nend\n\nMinimize the use of break and continue in loops.\nThe end lines in nested loops can have comments to clarify the code block.\n\nfor index=1:2\n    if index==1\n        dosomething(index);\n        ...\n    end % End if\nend % End for",
    "crumbs": [
      "Appendices",
      "Code Style Cheat Sheet"
    ]
  },
  {
    "objectID": "appendices/code-style-cheatsheet.html#conditionals",
    "href": "appendices/code-style-cheatsheet.html#conditionals",
    "title": "Code Style Cheat Sheet",
    "section": "Conditionals",
    "text": "Conditionals\n\nAvoid complicated conditional expressions. Use temporary logical variables instead.\n\nisValid = (v &gt;= lowerLimit) & (v &lt;= upperLimit);\nisNew = ismember(v, valueArray);\n\nAvoid the conditional expression if 0.\nAn if-else sequence should include the else condition.\nThe usual case should be put in the if-part and the exception in the else-part of an if-else statement.\nA switch statement should include the otherwise condition.\nUse a switch sequence if the variable is a string.\nUse a switch statement in place of many if-elseif-else statements when possible.",
    "crumbs": [
      "Appendices",
      "Code Style Cheat Sheet"
    ]
  },
  {
    "objectID": "appendices/code-style-cheatsheet.html#general-1",
    "href": "appendices/code-style-cheatsheet.html#general-1",
    "title": "Code Style Cheat Sheet",
    "section": "General",
    "text": "General\n\nAvoid cryptic code. You should be able to look at it a month from now and know what it does.\nUse parentheses for clarity even if not need because of operator precedence.\nMinimize the use of numbers in expressions. Use a named constant instead.\nAlways use a zero before the decimal point: THRESHOLD = 0.5\nMake floating point comparisons with caution.",
    "crumbs": [
      "Appendices",
      "Code Style Cheat Sheet"
    ]
  },
  {
    "objectID": "appendices/code-style-cheatsheet.html#layout",
    "href": "appendices/code-style-cheatsheet.html#layout",
    "title": "Code Style Cheat Sheet",
    "section": "Layout",
    "text": "Layout\n\nContents should be kept within the first 80 columns.\nLines should be split after commas, spaces, and operators.\nAlign a continued line with the beginning of the expression on the previous line:\n\ntotalSum = a + b + c ...\n    d + e;\n\nBasic indentation should be 4 spaces.\nIn general, a line of code should contain only one executable statement.\nShort single statement if, for, or while statements can be written on one line:\n\nif(condition), statement; end",
    "crumbs": [
      "Appendices",
      "Code Style Cheat Sheet"
    ]
  },
  {
    "objectID": "appendices/code-style-cheatsheet.html#white-space",
    "href": "appendices/code-style-cheatsheet.html#white-space",
    "title": "Code Style Cheat Sheet",
    "section": "White Space",
    "text": "White Space\n\nSurround =, &, and | by spaces.\nFollow commas by a space.\nKeywords should be followed by a space.\nBlocks of code should be separated by three blank lines or a section break.\nUse code alignment wherever it enhances readability.",
    "crumbs": [
      "Appendices",
      "Code Style Cheat Sheet"
    ]
  },
  {
    "objectID": "appendices/code-style-cheatsheet.html#comments",
    "href": "appendices/code-style-cheatsheet.html#comments",
    "title": "Code Style Cheat Sheet",
    "section": "Comments",
    "text": "Comments\n\nComments cannot justify poorly written code.\nComments should agree with the code but not restate the code.\nComments should have the same indentation as the statement(s) referenced.\nTraditional function header comments should support help and lookfor:\n\nhelp prints the first continuous block of comments.\nlookfor searches the 1st comment line of all m-files on the path.\n\nFunction headers should discuss any special requirements for the input/output argument and describe any side effects of the function.\nWrite the function name using correct case in the function header comments.\n\nfunction runEverything\n% runEverything runs all mfiles in its folder\n\nPut any copyright lines and change history after the function header with a blank line in between.\nAll comments should be in English.",
    "crumbs": [
      "Appendices",
      "Code Style Cheat Sheet"
    ]
  },
  {
    "objectID": "appendices/code-style-cheatsheet.html#documentation",
    "href": "appendices/code-style-cheatsheet.html#documentation",
    "title": "Code Style Cheat Sheet",
    "section": "Documentation",
    "text": "Documentation\n\nWrite header comments with text markup to provide user documentation. Include sections that correspond to a help page: syntax, description, example, and see also.\nConsider writing the documentation first to better define inputs, outputs and functionality.\nConsider using a source control tool such as SVN or GIT. If you do not use a source control tool, document changes by adding change history comments after the function header or near the top of the script.\n\n\n\n\n\n1. Johnson, R. K. The elements of MATLAB style. (Cambridge University Press, 2010).",
    "crumbs": [
      "Appendices",
      "Code Style Cheat Sheet"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "1. The\nTuring Way Community. The Turing Way: A handbook\nfor reproducible, ethical and collaborative research. (2022)\ndoi:10.5281/zenodo.3233853.\n\n\n2. Johnson, R. K. The elements of MATLAB\nstyle. (Cambridge University Press, 2010).",
    "crumbs": [
      "Appendices",
      "References"
    ]
  },
  {
    "objectID": "_license.html",
    "href": "_license.html",
    "title": "License",
    "section": "",
    "text": "License text\nAttribution-ShareAlike 4.0 International\n=======================================================================\nCreative Commons Corporation (‚ÄúCreative Commons‚Äù) is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an ‚Äúas-is‚Äù basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible.\nUsing Creative Commons Public Licenses\nCreative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses.\n=======================================================================\nCreative Commons Attribution-ShareAlike 4.0 International Public License\nBy exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-ShareAlike 4.0 International Public License (‚ÄúPublic License‚Äù). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.\nSection 1 ‚Äì Definitions.\nSection 2 ‚Äì Scope.\nSection 3 ‚Äì License Conditions.\nYour exercise of the Licensed Rights is expressly made subject to the following conditions.\nSection 4 ‚Äì Sui Generis Database Rights.\nWhere the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:\nFor the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.\nSection 5 ‚Äì Disclaimer of Warranties and Limitation of Liability.\nSection 6 ‚Äì Term and Termination.\nSection 7 ‚Äì Other Terms and Conditions.\nSection 8 ‚Äì Interpretation.\n=======================================================================\nCreative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the ‚ÄúLicensor.‚Äù The text of the Creative Commons public licenses is dedicated to the public domain under the CC0 Public Domain Dedication. Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark ‚ÄúCreative Commons‚Äù or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses.\nCreative Commons may be contacted at creativecommons.org.",
    "crumbs": [
      "Appendices",
      "License"
    ]
  },
  {
    "objectID": "_license.html#license-text",
    "href": "_license.html#license-text",
    "title": "License",
    "section": "",
    "text": "Considerations for licensors: Our public licenses are\n intended for use by those authorized to give the public\n permission to use material in ways otherwise restricted by\n copyright and certain other rights. Our licenses are\n irrevocable. Licensors should read and understand the terms\n and conditions of the license they choose before applying it.\n Licensors should also secure all rights necessary before\n applying our licenses so that the public can reuse the\n material as expected. Licensors should clearly mark any\n material not subject to the license. This includes other CC-\n licensed material, or material used under an exception or\n limitation to copyright. More considerations for licensors:\n wiki.creativecommons.org/Considerations_for_licensors\n\n Considerations for the public: By using one of our public\n licenses, a licensor grants the public permission to use the\n licensed material under specified terms and conditions. If\n the licensor's permission is not necessary for any reason--for\n example, because of any applicable exception or limitation to\n copyright--then that use is not regulated by the license. Our\n licenses grant only permissions under copyright and certain\n other rights that a licensor has authority to grant. Use of\n the licensed material may still be restricted for other\n reasons, including because others have copyright or other\n rights in the material. A licensor may make special requests,\n such as asking that all changes be marked or described.\n Although not required by our licenses, you are encouraged to\n respect those requests where reasonable. More considerations\n for the public:\n wiki.creativecommons.org/Considerations_for_licensees\n\n\n\n\n\nAdapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.\nAdapter‚Äôs License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License.\nBY-SA Compatible License means a license listed at creativecommons.org/compatiblelicenses, approved by Creative Commons as essentially the equivalent of this Public License.\nCopyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.\nEffective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.\nExceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.\nLicense Elements means the license attributes listed in the name of a Creative Commons Public License. The License Elements of this Public License are Attribution and ShareAlike.\nLicensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License.\nLicensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.\nLicensor means the individual(s) or entity(ies) granting rights under this Public License.\nShare means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.\nSui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.\nYou means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.\n\n\n\nLicense grant.\n\nSubject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:\n\nreproduce and Share the Licensed Material, in whole or in part; and\nproduce, reproduce, and Share Adapted Material.\n\nExceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions.\nTerm. The term of this Public License is specified in Section 6(a).\nMedia and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)\n\nnever produces Adapted Material.\n\nDownstream recipients.\n\nOffer from the Licensor ‚Äì Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.\nAdditional offer from the Licensor ‚Äì Adapted Material. Every recipient of Adapted Material from You automatically receives an offer from the Licensor to exercise the Licensed Rights in the Adapted Material under the conditions of the Adapter‚Äôs License You apply.\nNo downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.\n\nNo endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).\n\nOther rights.\n\nMoral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise.\nPatent and trademark rights are not licensed under this Public License.\nTo the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties.\n\n\n\n\n\nAttribution.\n\nIf You Share the Licensed Material (including in modified form), You must:\n\nretain the following if it is supplied by the Licensor with the Licensed Material:\n\nidentification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated);\na copyright notice;\na notice that refers to this Public License;\na notice that refers to the disclaimer of warranties;\na URI or hyperlink to the Licensed Material to the extent reasonably practicable;\n\nindicate if You modified the Licensed Material and retain an indication of any previous modifications; and\nindicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License.\n\nYou may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information.\nIf requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable.\n\nShareAlike.\nIn addition to the conditions in Section 3(a), if You Share Adapted Material You produce, the following conditions also apply.\n\nThe Adapter‚Äôs License You apply must be a Creative Commons license with the same License Elements, this version or later, or a BY-SA Compatible License.\nYou must include the text of, or the URI or hyperlink to, the Adapter‚Äôs License You apply. You may satisfy this condition in any reasonable manner based on the medium, means, and context in which You Share Adapted Material.\nYou may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, Adapted Material that restrict exercise of the rights granted under the Adapter‚Äôs License You apply.\n\n\n\n\n\nfor the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database;\nif You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material, including for purposes of Section 3(b); and\nYou must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.\n\n\n\n\nUNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS, IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.\nTO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION, NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES, COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.\nThe disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.\n\n\n\nThis Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.\nWhere Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:\n\nautomatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or\nupon express reinstatement by the Licensor.\n\nFor the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.\nFor the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.\nSections 1, 5, 6, 7, and 8 survive termination of this Public License.\n\n\n\nThe Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.\nAny arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.\n\n\n\nFor the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.\nTo the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.\nNo term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.\nNothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.",
    "crumbs": [
      "Appendices",
      "License"
    ]
  },
  {
    "objectID": "privacypolicy.html",
    "href": "privacypolicy.html",
    "title": "Privacy Policy",
    "section": "",
    "text": "This site collects no user data.\nIt does use Google analytics to aid in measuring the impact and usage of the materials but does not use cookies to do so.\nMeasuring usage of repliMAT allows us to potentially apply for future funding as well as finding out which sections are most popular, allowing us to use our efforts to the best effect.\nPlease see the source code to see that anonymity settings are enabled in the quarto config (_quarto.yml) - which is used to generate the site.\nOnline privacy is important to us. If you have any concerns about privacy when using repliMAT - please contact me.",
    "crumbs": [
      "Appendices",
      "Privacy Policy"
    ]
  }
]